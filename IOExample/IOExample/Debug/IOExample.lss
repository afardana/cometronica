
IOExample.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000015e  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001f2  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000957  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00000986  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000137  00000000  00000000  000009c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000b7  00000000  00000000  00000afd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001cf  00000000  00000000  00000bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000074  00000000  00000000  00000d84  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000c2  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000003c  00000000  00000000  00000eba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  00000ef6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	38 c0       	rjmp	.+112    	; 0xae <__vector_15>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	45 d0       	rcall	.+138    	; 0x134 <main>
  aa:	57 c0       	rjmp	.+174    	; 0x15a <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_15>:
void task1();
void task2();
void init();

ISR (TIMER0_COMP_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
	if (time1>0) time1--;
  ba:	80 91 01 01 	lds	r24, 0x0101
  be:	88 23       	and	r24, r24
  c0:	29 f0       	breq	.+10     	; 0xcc <__vector_15+0x1e>
  c2:	80 91 01 01 	lds	r24, 0x0101
  c6:	81 50       	subi	r24, 0x01	; 1
  c8:	80 93 01 01 	sts	0x0101, r24
	if (time2>0) time2--;
  cc:	80 91 02 01 	lds	r24, 0x0102
  d0:	88 23       	and	r24, r24
  d2:	29 f0       	breq	.+10     	; 0xde <__vector_15+0x30>
  d4:	80 91 02 01 	lds	r24, 0x0102
  d8:	81 50       	subi	r24, 0x01	; 1
  da:	80 93 02 01 	sts	0x0102, r24
}
  de:	8f 91       	pop	r24
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <task1>:
	}
}

void task1()
{
	led = led ^ 0x01;
  ea:	90 91 00 01 	lds	r25, 0x0100
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	89 27       	eor	r24, r25
  f2:	80 93 00 01 	sts	0x0100, r24
	PORTB = led;
  f6:	88 bb       	out	0x18, r24	; 24
  f8:	08 95       	ret

000000fa <task2>:
}

void task2()
{
	led = led ^ 0x02;
  fa:	90 91 00 01 	lds	r25, 0x0100
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	89 27       	eor	r24, r25
 102:	80 93 00 01 	sts	0x0100, r24
	PORTB = led;
 106:	88 bb       	out	0x18, r24	; 24
 108:	08 95       	ret

0000010a <init>:
}

void init()
{
	DDRA = (1<<DDA0);
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1<<PA0);
 10e:	d8 9a       	sbi	0x1b, 0	; 27
	DDRB = (1<<DDB1 | 1<<DDB0);
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	87 bb       	out	0x17, r24	; 23
	
	// Set timer0 for 1 mSec timebase
	OCR0 = 0xF9;
 114:	89 ef       	ldi	r24, 0xF9	; 249
 116:	81 bf       	out	0x31, r24	; 49
	TCCR0 = (1<<WGM01 | 1<<CS02); // Set prescaler to 64 with CTC mode on timer 0
 118:	8c e0       	ldi	r24, 0x0C	; 12
 11a:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1<<OCIE0); // Turn on Output Compare Match 0 ISR
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	87 bf       	out	0x37, r24	; 55
	
	led = 0x00;
 120:	10 92 00 01 	sts	0x0100, r1
	time1 = t1;
 124:	8a ef       	ldi	r24, 0xFA	; 250
 126:	80 93 01 01 	sts	0x0101, r24
	time2 = t2;
 12a:	8d e7       	ldi	r24, 0x7D	; 125
 12c:	80 93 02 01 	sts	0x0102, r24
	sei();
 130:	78 94       	sei
 132:	08 95       	ret

00000134 <main>:
	if (time2>0) time2--;
}

int main(void)
{
	init();
 134:	ea df       	rcall	.-44     	; 0x10a <init>
	
	PORTA &= ~(1<<PA0);
 136:	d8 98       	cbi	0x1b, 0	; 27
	
	while (1)
	{
		if (time1 == 0) { time1 = t1; task1(); }
 138:	ca ef       	ldi	r28, 0xFA	; 250
		if (time2 == 0) { time2 = t2; task2(); }
 13a:	dd e7       	ldi	r29, 0x7D	; 125
	
	PORTA &= ~(1<<PA0);
	
	while (1)
	{
		if (time1 == 0) { time1 = t1; task1(); }
 13c:	80 91 01 01 	lds	r24, 0x0101
 140:	81 11       	cpse	r24, r1
 142:	03 c0       	rjmp	.+6      	; 0x14a <main+0x16>
 144:	c0 93 01 01 	sts	0x0101, r28
 148:	d0 df       	rcall	.-96     	; 0xea <task1>
		if (time2 == 0) { time2 = t2; task2(); }
 14a:	80 91 02 01 	lds	r24, 0x0102
 14e:	81 11       	cpse	r24, r1
 150:	f5 cf       	rjmp	.-22     	; 0x13c <main+0x8>
 152:	d0 93 02 01 	sts	0x0102, r29
 156:	d1 df       	rcall	.-94     	; 0xfa <task2>
 158:	f1 cf       	rjmp	.-30     	; 0x13c <main+0x8>

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
